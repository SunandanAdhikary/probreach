(set-logic QF_NRA_ODE)
(declare-fun Sx () Real)
(declare-fun Sx_0_0 () Real)
(declare-fun Sx_0_t () Real)
(assert (>= Sx_0_0 (- 10)))
(assert (>= Sx_0_t (- 10)))
(assert (<= Sx_0_0  1000))
(assert (<= Sx_0_t  1000))
(declare-fun Sy () Real)
(declare-fun Sy_0_0 () Real)
(declare-fun Sy_0_t () Real)
(assert (>= Sy_0_0  0))
(assert (>= Sy_0_t  0))
(assert (<= Sy_0_0  100))
(assert (<= Sy_0_t  100))
(declare-fun alpha () Real)
(declare-fun alpha_0_0 () Real)
(declare-fun alpha_0_t () Real)
(assert (>= alpha_0_0  0.7854))
(assert (>= alpha_0_t  0.7854))
(assert (<= alpha_0_0  0.7854))
(assert (<= alpha_0_t  0.7854))
(declare-fun g () Real)
(declare-fun g_0_0 () Real)
(declare-fun g_0_t () Real)
(assert (>= g_0_0  9.8067))
(assert (>= g_0_t  9.8067))
(assert (<= g_0_0  9.8067))
(assert (<= g_0_t  9.8067))
(declare-fun tau () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(assert (>= tau_0_0  0))
(assert (>= tau_0_t  0))
(assert (<= tau_0_0  15))
(assert (<= tau_0_t  15))
(declare-fun v0 () Real)
(declare-fun v0_0_0 () Real)
(declare-fun v0_0_t () Real)
(declare-fun time_0 () Real)
(assert (>= time_0  0))
(assert (<= time_0  15))
(define-ode flow_1 ((= d/dt[Sx] (* v0(cos alpha)))(= d/dt[Sy] (-(* v0(sin alpha))(* g tau)))(= d/dt[alpha]  0)(= d/dt[g]  0)(= d/dt[tau]  1.0)(= d/dt[v0]  0)))
(assert (and 
(or ((and(= Sx_0_0 0)(= Sy_0_0 0)(= tau_0_0 0))))
(>= v0_0_0 20)
(<= v0_0_0 20)
(= [Sx_0_t Sy_0_t alpha_0_t g_0_t tau_0_t v0_0_t ] (integral 0.0 time_0 [Sx_0_0 Sy_0_0 alpha_0_0 g_0_0 tau_0_0 v0_0_0 ] flow_1))
(forall_t 1 [0.0 time_0] (>= Sx_0_t 0.0))
(forall_t 1 [0.0 time_0] (>= Sy_0_t 0.0))
(forall_t 1 [0.0 time_0] (>= tau_0_t 0))
(or ((and(>= Sx_0_t 100.0))))))
(check-sat)
(exit)
