(set-logic QF_NRA_ODE)
(declare-fun Sx () Real)
(declare-fun Sx_0_0 () Real)
(declare-fun Sx_0_t () Real)
(assert (>= Sx_0_0  0))
(assert (>= Sx_0_t  0))
(assert (<= Sx_0_0  10000))
(assert (<= Sx_0_t  10000))
(declare-fun Sx_1_0 () Real)
(declare-fun Sx_1_t () Real)
(assert (>= Sx_1_0  0))
(assert (>= Sx_1_t  0))
(assert (<= Sx_1_0  10000))
(assert (<= Sx_1_t  10000))
(declare-fun Sx_2_0 () Real)
(declare-fun Sx_2_t () Real)
(assert (>= Sx_2_0  0))
(assert (>= Sx_2_t  0))
(assert (<= Sx_2_0  10000))
(assert (<= Sx_2_t  10000))
(declare-fun Sy () Real)
(declare-fun Sy_0_0 () Real)
(declare-fun Sy_0_t () Real)
(assert (>= Sy_0_0  0))
(assert (>= Sy_0_t  0))
(assert (<= Sy_0_0  1000))
(assert (<= Sy_0_t  1000))
(declare-fun Sy_1_0 () Real)
(declare-fun Sy_1_t () Real)
(assert (>= Sy_1_0  0))
(assert (>= Sy_1_t  0))
(assert (<= Sy_1_0  1000))
(assert (<= Sy_1_t  1000))
(declare-fun Sy_2_0 () Real)
(declare-fun Sy_2_t () Real)
(assert (>= Sy_2_0  0))
(assert (>= Sy_2_t  0))
(assert (<= Sy_2_0  1000))
(assert (<= Sy_2_t  1000))
(declare-fun alpha () Real)
(declare-fun alpha_0_0 () Real)
(declare-fun alpha_0_t () Real)
(assert (>= alpha_0_0  0.5236))
(assert (>= alpha_0_t  0.5236))
(assert (<= alpha_0_0  1.0472))
(assert (<= alpha_0_t  1.0472))
(declare-fun alpha_1_0 () Real)
(declare-fun alpha_1_t () Real)
(assert (>= alpha_1_0  0.5236))
(assert (>= alpha_1_t  0.5236))
(assert (<= alpha_1_0  1.0472))
(assert (<= alpha_1_t  1.0472))
(declare-fun alpha_2_0 () Real)
(declare-fun alpha_2_t () Real)
(assert (>= alpha_2_0  0.5236))
(assert (>= alpha_2_t  0.5236))
(assert (<= alpha_2_0  1.0472))
(assert (<= alpha_2_t  1.0472))
(declare-fun tau () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(assert (>= tau_0_0  0))
(assert (>= tau_0_t  0))
(assert (<= tau_0_0  10))
(assert (<= tau_0_t  10))
(declare-fun tau_1_0 () Real)
(declare-fun tau_1_t () Real)
(assert (>= tau_1_0  0))
(assert (>= tau_1_t  0))
(assert (<= tau_1_0  10))
(assert (<= tau_1_t  10))
(declare-fun tau_2_0 () Real)
(declare-fun tau_2_t () Real)
(assert (>= tau_2_0  0))
(assert (>= tau_2_t  0))
(assert (<= tau_2_0  10))
(assert (<= tau_2_t  10))
(declare-fun v () Real)
(declare-fun v_0_0 () Real)
(declare-fun v_0_t () Real)
(assert (>= v_0_0  0))
(assert (>= v_0_t  0))
(assert (<= v_0_0  500))
(assert (<= v_0_t  500))
(declare-fun v_1_0 () Real)
(declare-fun v_1_t () Real)
(assert (>= v_1_0  0))
(assert (>= v_1_t  0))
(assert (<= v_1_0  500))
(assert (<= v_1_t  500))
(declare-fun v_2_0 () Real)
(declare-fun v_2_t () Real)
(assert (>= v_2_0  0))
(assert (>= v_2_t  0))
(assert (<= v_2_0  500))
(assert (<= v_2_t  500))
(declare-fun v0 () Real)
(declare-fun v0_0_0 () Real)
(declare-fun v0_0_t () Real)
(assert (>= v0_0_0  6.1))
(assert (>= v0_0_t  6.1))
(assert (<= v0_0_0  33.9))
(assert (<= v0_0_t  33.9))
(declare-fun v0_1_0 () Real)
(declare-fun v0_1_t () Real)
(assert (>= v0_1_0  6.1))
(assert (>= v0_1_t  6.1))
(assert (<= v0_1_0  33.9))
(assert (<= v0_1_t  33.9))
(declare-fun v0_2_0 () Real)
(declare-fun v0_2_t () Real)
(assert (>= v0_2_0  6.1))
(assert (>= v0_2_t  6.1))
(assert (<= v0_2_0  33.9))
(assert (<= v0_2_t  33.9))
(declare-fun time_0 () Real)
(assert (>= time_0  0))
(assert (<= time_0  10))
(declare-fun time_1 () Real)
(assert (>= time_1  0))
(assert (<= time_1  10))
(declare-fun time_2 () Real)
(assert (>= time_2  0))
(assert (<= time_2  10))
(define-ode flow_1 ((= d/dt[Sx] (* v(cos alpha)))(= d/dt[Sy] (-(* v(sin alpha))(* 9.8 tau)))(= d/dt[alpha]  0)(= d/dt[tau]  1.0)(= d/dt[v]  0.0)(= d/dt[v0]  0)))
(assert (and 
(or ((and(= Sx_0_0 0)(= Sy_0_0 0)(= tau_0_0 0)(= v_0_0 v0_0_0))))
(>= alpha_0_0 0.5236)
(<= alpha_0_0 0.58905)
(>= v0_0_0 6.1)
(<= v0_0_0 33.9)
(= [Sx_0_t Sy_0_t alpha_0_t tau_0_t v_0_t v0_0_t ] (integral 0.0 time_0 [Sx_0_0 Sy_0_0 alpha_0_0 tau_0_0 v_0_0 v0_0_0 ] flow_1))
(and(> tau_0_t 1e-3)(<= Sy_0_t 0)(>= Sy_0_t 0))
(= Sx_1_0  Sx_0_t)(= Sy_1_0  0)(= tau_1_0  0)(= v_1_0 (* 0.9 v_0_t))(= v0_1_0  v0_0_t)(= [Sx_1_t Sy_1_t alpha_1_t tau_1_t v_1_t v0_1_t ] (integral 0.0 time_1 [Sx_1_0 Sy_1_0 alpha_1_0 tau_1_0 v_1_0 v0_1_0 ] flow_1))
(and(> tau_1_t 1e-3)(<= Sy_1_t 0)(>= Sy_1_t 0))
(= Sx_2_0  Sx_1_t)(= Sy_2_0  0)(= tau_2_0  0)(= v_2_0 (* 0.9 v_1_t))(= v0_2_0  v0_1_t)(= [Sx_2_t Sy_2_t alpha_2_t tau_2_t v_2_t v0_2_t ] (integral 0.0 time_2 [Sx_2_0 Sy_2_0 alpha_2_0 tau_2_0 v_2_0 v0_2_0 ] flow_1))
(or ((and(= tau_2_t 0)(>= Sx_2_t 100))))))
(check-sat)
(exit)
