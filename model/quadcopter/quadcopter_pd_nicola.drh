//constants
#define pi	3.14
#define L 0.23
#define kd  7.5e-7
#define k       5.2
#define m 0.650
#define b       3.13e-5
#define g       9.8


// NICOLA: define here the PD law for gamma_i
// PD constants
#define KD 4
#define KP 3
#define phi_dot (omegax + (sin(phi)*sin(the)/ ((sin(phi)^2*cos(the)/cos(phi) + cos(phi)*cos(the))*cos(phi)))*omegay + (sin(the)/(sin(phi)^2*cos(the)/cos(phi) + cos(phi)*cos(the)))*omegaz)
#define the_dot ((-sin(phi)^2*cos(the)/((sin(phi)^2*cos(the)/cos(phi) + cos(phi)*cos(the))*cos(phi)^2) + 1/cos(phi))*omegay + (-sin(phi)*cos(the)/((sin(phi)^2*cos(the)/cos(phi) + cos(phi)*cos(the))*cos(phi)))*omegaz)
#define psi_dot ((sin(phi)/((sin(phi)^2*cos(the)/cos(phi) + cos(phi)*cos(the))*cos(phi)))*omegay + (1/(sin(phi)^2*cos(the)/cos(phi) + cos(phi)*cos(the)))*omegaz)
#define e_phi (KD*phi_dot + KP*phi)
#define e_psi (KD*psi_dot + KP*psi)
#define e_the (KD*the_dot + KP*the)
#define gamma1 (m*g/(4*k*cos(the)*cos(phi)) -(2*b*e_phi*Ixx + e_psi*Izz*k*L)/(4*b*k*L) )
#define gamma2 (m*g/(4*k*cos(the)*cos(phi)) + e_psi*Izz/(4*b) -e_the*Iyy/(2*k*L))
#define gamma3 (m*g/(4*k*cos(the)*cos(phi)) -(-2*b*e_phi*Ixx + e_psi*Izz*k*L)/(4*b*k*L) )
#define gamma4 (m*g/(4*k*cos(the)*cos(phi)) + e_psi*Izz/(4*b) + e_the*Iyy/(2*k*L))

// NICOLA: we don't use w_i^2 = gamma_i, but directly gamma_i
//#define wsqsum  ((w1)^2 + (w2)^2 + (w3)^2 + (w4)^2)
#define wsqsum  (gamma1 + gamma2 + gamma3 + gamma4)

//inertia
#define Ixx	0.0075
#define Iyy	0.0075
#define Izz	0.013

//torques
#define tauphi		L*k*(gamma1 - gamma3)
#define tauthe		L*k*(gamma2 - gamma4)
#define taupsi		b*(gamma1 - gamma2 + gamma3 - gamma4)

// position of quadcopter
[-300, 300] x;
[-300, 300] y;
[-1000, 1000] z;

[-200, 200] xdot;
[-200, 200] ydot;
[-200, 2000] zdot;

% angular velocities of quadcopter
[-100, 100] omegax;
[-100, 100] omegay;
[-100, 100] omegaz;

// angular velocities of the four motors
// we won't need explicit ODEs for these, as they are controlled by the PD
//[0, 1] w1;
//[0, 1] w2;
//[0, 1] w3;
//[0, 1] w4;


// roll angle
[-1, 1] phi;
// pitch angle
[-1, 1] the;
// yaw angle
[-1, 1] psi;


[0,20] time;
[0,20] tau;

// add wind disturbance depending on the mode

{mode 1;
invt:
               (tau >= 0);
               (z <= 500);
flow:
                d/dt[omegax] = tauphi*(1/Ixx)-(Iyy - Izz)*omegay*omegaz/Ixx;
                d/dt[omegay] = tauthe*(1/Iyy)-(Izz - Ixx)*omegax*omegaz/Iyy;
                d/dt[omegaz] = taupsi*(1/Izz)-(Ixx - Iyy)*omegax*omegay/Izz;

                d/dt[phi] = phi_dot;

                d/dt[the] = the_dot;

                d/dt[psi] = psi_dot;

                d/dt[xdot] = (1/m)*(sin(the)*sin(psi)*k*wsqsum - kd*xdot);
                d/dt[ydot] = (1/m)*(-cos(psi)*sin(the)*k*wsqsum - kd*ydot);
                d/dt[zdot] = (1/m)*(+g+cos(the)*k*wsqsum + kd*zdot);

                d/dt[x] = xdot;
                d/dt[y] = ydot;
                d/dt[z] = zdot;

//                d/dt[w1] = 0;
//                d/dt[w2] = 0;
//                d/dt[w3] = 0;
//                d/dt[w4] = 0;

                d/dt[tau] = 1;

        // we can make this jump determinstic at z=500
        jump: (z >= 500)
              ==> @2 (and (phi' = phi)
                          (the' = the)
                          (psi' = psi)
                          (omegax' = omegax)
                          (omegay' = omegay)
                          (omegaz' = omegaz)
                          (x' = x)
                          (y' = y)
                          (z' = z)
                          (xdot' = xdot)
                          (ydot' = ydot)
                          (zdot' = zdot)
                          (tau' = tau)
//                          (w1' = 0)
//                          (w2' = 1)
//                          (w3' = 0)
//                          (w4' = 1)
                          );
}

{mode 2;
invt:
               (tau >= 0);
               (z <= 900);
               (z >= 200);
flow:
                d/dt[omegax] = tauphi*(1/Ixx)-(Iyy - Izz)*omegay*omegaz/Ixx;
                d/dt[omegay] = tauthe*(1/Iyy)-(Izz - Ixx)*omegax*omegaz/Iyy;
                d/dt[omegaz] = taupsi*(1/Izz)-(Ixx - Iyy)*omegax*omegay/Izz;

                d/dt[phi] = phi_dot;

                d/dt[the] = the_dot;

                d/dt[psi] = psi_dot;

                d/dt[xdot] = (1/m)*(sin(the)*sin(psi)*k*wsqsum - kd*xdot);
                d/dt[ydot] = (1/m)*(-cos(psi)*sin(the)*k*wsqsum - kd*ydot);
                d/dt[zdot] = (1/m)*(-g-cos(the)*k*wsqsum - kd*zdot);

                d/dt[x] = xdot;
                d/dt[y] = ydot;
                d/dt[z] = zdot;

//                d/dt[w1] = 0;
//                d/dt[w2] = 0;
//                d/dt[w3] = 0;
//                d/dt[w4] = 0;

                d/dt[tau] = 1;

        // we can make this jump deterministic at z=200
        jump: (z <= 200)
              ==> @1 (and (phi' = phi)
                          (the' = the)
                          (psi' = psi)
                          (omegax' = omegax)
                          (omegay' = omegay)
                          (omegaz' = omegaz)
                          (x' = x)
                          (y' = y)
                          (z' = z)
                          (xdot' = xdot)
                          (ydot' = ydot)
                          (zdot' = zdot)
                          (tau' = tau)
//                          (w1' = 1)
//                          (w2' = 0)
//                          (w3' = 1)
//                          (w4' = 0)
                          );
}

// maybe init condition must be changed
init: @2 (and 
//              (w1 = 1.0) (w2 = 0.0) (w3 = 1.0) (w4 = 0.0)
              // angles
              (phi = 0.0) 
              (the = 0.0) 
              (psi = 0.0)
              // corresponding initial angular velocities (could be random)
              // same as theta dot initially
              (omegax = 0.00)
              (omegay = 0.01)
              (omegaz = 0.02)
              // position
              (x = 0)
              (y = 0)
              (z = 250)
              // velocity
              (xdot = 0) 
              (ydot = 0) 
              (zdot = 0)
              (tau = 0));

// here, they want to see if they can reach a crash (z=0).
goal: @1 (and (tau >= 15.0)
              (z = 0)
         );