(set-logic QF_NRA_ODE)
; declaring functions and their bounds
(declare-fun DG1 () Real)
(declare-fun DG1_0_0 () Real)
(declare-fun DG1_0_t () Real)
(declare-fun DG2 () Real)
(declare-fun DG2_0_0 () Real)
(declare-fun DG2_0_t () Real)
(declare-fun DG3 () Real)
(declare-fun DG3_0_0 () Real)
(declare-fun DG3_0_t () Real)
(declare-fun G1 () Real)
(declare-fun G1_0_0 () Real)
(declare-fun G1_0_t () Real)
(assert (>= G1_0_0  0))
(assert (>= G1_0_t  0))
(assert (<= G1_0_0  1e3))
(assert (<= G1_0_t  1e3))
(declare-fun G2 () Real)
(declare-fun G2_0_0 () Real)
(declare-fun G2_0_t () Real)
(assert (>= G2_0_0  0))
(assert (>= G2_0_t  0))
(assert (<= G2_0_0  1e3))
(assert (<= G2_0_t  1e3))
(declare-fun I () Real)
(declare-fun I_0_0 () Real)
(declare-fun I_0_t () Real)
(assert (>= I_0_0  0))
(assert (>= I_0_t  0))
(assert (<= I_0_0  1e3))
(assert (<= I_0_t  1e3))
(declare-fun Kd () Real)
(declare-fun Kd_0_0 () Real)
(declare-fun Kd_0_t () Real)
(assert (>= Kd_0_0 (- 1e-1)))
(assert (>= Kd_0_t (- 1e-1)))
(assert (<= Kd_0_0  0))
(assert (<= Kd_0_t  0))
(declare-fun Ki () Real)
(declare-fun Ki_0_0 () Real)
(declare-fun Ki_0_t () Real)
(assert (>= Ki_0_0 (- 1e-6)))
(assert (>= Ki_0_t (- 1e-6)))
(assert (<= Ki_0_0  0))
(assert (<= Ki_0_t  0))
(declare-fun Kp () Real)
(declare-fun Kp_0_0 () Real)
(declare-fun Kp_0_t () Real)
(assert (>= Kp_0_0 (- 1e-3)))
(assert (>= Kp_0_t (- 1e-3)))
(assert (<= Kp_0_0  0))
(assert (<= Kp_0_t  0))
(declare-fun Q1 () Real)
(declare-fun Q1_0_0 () Real)
(declare-fun Q1_0_t () Real)
(assert (>= Q1_0_0  0))
(assert (>= Q1_0_t  0))
(assert (<= Q1_0_0  1e3))
(assert (<= Q1_0_t  1e3))
(declare-fun Q1_prev () Real)
(declare-fun Q1_prev_0_0 () Real)
(declare-fun Q1_prev_0_t () Real)
(assert (>= Q1_prev_0_0  0))
(assert (>= Q1_prev_0_t  0))
(assert (<= Q1_prev_0_0  1e3))
(assert (<= Q1_prev_0_t  1e3))
(declare-fun Q2 () Real)
(declare-fun Q2_0_0 () Real)
(declare-fun Q2_0_t () Real)
(assert (>= Q2_0_0  0))
(assert (>= Q2_0_t  0))
(assert (<= Q2_0_0  1e3))
(assert (<= Q2_0_t  1e3))
(declare-fun S1 () Real)
(declare-fun S1_0_0 () Real)
(declare-fun S1_0_t () Real)
(assert (>= S1_0_0  0))
(assert (>= S1_0_t  0))
(assert (<= S1_0_0  1e3))
(assert (<= S1_0_t  1e3))
(declare-fun S2 () Real)
(declare-fun S2_0_0 () Real)
(declare-fun S2_0_t () Real)
(assert (>= S2_0_0  0))
(assert (>= S2_0_t  0))
(assert (<= S2_0_0  1e3))
(assert (<= S2_0_t  1e3))
(declare-fun counter () Real)
(declare-fun counter_0_0 () Real)
(declare-fun counter_0_t () Real)
(assert (>= counter_0_0  0))
(assert (>= counter_0_t  0))
(assert (<= counter_0_0  1440))
(assert (<= counter_0_t  1440))
(declare-fun e () Real)
(declare-fun e_0_0 () Real)
(declare-fun e_0_t () Real)
(assert (>= e_0_0 (- 1e9)))
(assert (>= e_0_t (- 1e9)))
(assert (<= e_0_0  1e9))
(assert (<= e_0_t  1e9))
(declare-fun e_der () Real)
(declare-fun e_der_0_0 () Real)
(declare-fun e_der_0_t () Real)
(assert (>= e_der_0_0 (- 1e9)))
(assert (>= e_der_0_t (- 1e9)))
(assert (<= e_der_0_0  1e9))
(assert (<= e_der_0_t  1e9))
(declare-fun e_int () Real)
(declare-fun e_int_0_0 () Real)
(declare-fun e_int_0_t () Real)
(assert (>= e_int_0_0 (- 1e9)))
(assert (>= e_int_0_t (- 1e9)))
(assert (<= e_int_0_0  1e9))
(assert (<= e_int_0_t  1e9))
(declare-fun r () Real)
(declare-fun r_0_0 () Real)
(declare-fun r_0_t () Real)
(assert (>= r_0_0  0))
(assert (>= r_0_t  0))
(assert (<= r_0_0  1e3))
(assert (<= r_0_t  1e3))
(declare-fun tau () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(assert (>= tau_0_0  0))
(assert (>= tau_0_t  0))
(assert (<= tau_0_0  1440))
(assert (<= tau_0_t  1440))
(declare-fun tau_meal_1 () Real)
(declare-fun tau_meal_1_0_0 () Real)
(declare-fun tau_meal_1_0_t () Real)
(declare-fun tau_meal_2 () Real)
(declare-fun tau_meal_2_0_0 () Real)
(declare-fun tau_meal_2_0_t () Real)
(declare-fun u () Real)
(declare-fun u_0_0 () Real)
(declare-fun u_0_t () Real)
(assert (>= u_0_0 (- 1e9)))
(assert (>= u_0_t (- 1e9)))
(assert (<= u_0_0  1e9))
(assert (<= u_0_t  1e9))
(declare-fun x1 () Real)
(declare-fun x1_0_0 () Real)
(declare-fun x1_0_t () Real)
(assert (>= x1_0_0  0))
(assert (>= x1_0_t  0))
(assert (<= x1_0_0  1e3))
(assert (<= x1_0_t  1e3))
(declare-fun x2 () Real)
(declare-fun x2_0_0 () Real)
(declare-fun x2_0_t () Real)
(assert (>= x2_0_0  0))
(assert (>= x2_0_t  0))
(assert (<= x2_0_0  1e3))
(assert (<= x2_0_t  1e3))
(declare-fun x3 () Real)
(declare-fun x3_0_0 () Real)
(declare-fun x3_0_t () Real)
(assert (>= x3_0_0  0))
(assert (>= x3_0_t  0))
(assert (<= x3_0_0  1e3))
(assert (<= x3_0_t  1e3))
; assigning the values of the sample
(assert (>= DG1_0_0 33.75759503153954))
(assert (>= DG1_0_t 33.75759503153954))
(assert (<= DG1_0_0 33.75759503153956))
(assert (<= DG1_0_t 33.75759503153956))
(assert (>= DG2_0_0 85.69522144774653))
(assert (>= DG2_0_t 85.69522144774653))
(assert (<= DG2_0_0 85.69522144774656))
(assert (<= DG2_0_t 85.69522144774656))
(assert (>= DG3_0_0 49.8119289732344))
(assert (>= DG3_0_t 49.8119289732344))
(assert (<= DG3_0_0 49.81192897323443))
(assert (<= DG3_0_t 49.81192897323443))
(assert (>= tau_meal_1_0_0 314.4995057300611))
(assert (>= tau_meal_1_0_t 314.4995057300611))
(assert (<= tau_meal_1_0_0 314.4995057300612))
(assert (<= tau_meal_1_0_t 314.4995057300612))
(assert (>= tau_meal_2_0_0 320.389236432873))
(assert (>= tau_meal_2_0_t 320.389236432873))
(assert (<= tau_meal_2_0_0 320.3892364328731))
(assert (<= tau_meal_2_0_t 320.3892364328731))
(assert (>= Kd_0_0 0))
(assert (>= Kd_0_t 0))
(assert (<= Kd_0_0 0))
(assert (<= Kd_0_t 0))
(assert (>= Ki_0_0 0))
(assert (>= Ki_0_t 0))
(assert (<= Ki_0_0 0))
(assert (<= Ki_0_t 0))
(assert (>= Kp_0_0 -0.0005247928585907564))
(assert (>= Kp_0_t -0.0005247928585907564))
(assert (<= Kp_0_0 -0.0005247928585907564))
(assert (<= Kp_0_t -0.0005247928585907564))
; declaring time variable and integration bounds
(declare-fun time () Real)
(assert (>= time 0.0))
(assert (<= time 5.000000000000001))
; defining odes
(define-ode flow_3 ((= d/dt[DG1]  0)
(= d/dt[DG2]  0)
(= d/dt[DG3]  0)
(= d/dt[G1] (/(- G1) 40))
(= d/dt[G2] (/(- G1 G2) 40))
(= d/dt[I] (-(/ S2(* 55(* 0.12 100)))(* 0.138 I)))
(= d/dt[Kd]  0)
(= d/dt[Ki]  0)
(= d/dt[Kp]  0)
(= d/dt[Q1] (+(+(-(+(-(-(* 0.0097 100))(* x1 Q1))(* 0.066 Q2)) 0)(*(* 0.0161 100)(- 1 x3)))(/ G2 40)))
(= d/dt[Q1_prev]  0)
(= d/dt[Q2] (-(* x1 Q1)(*(+ 0.066 x2) Q2)))
(= d/dt[S1] (-(+ u 0.055485957306259535484277955219043)(/ S1 55)))
(= d/dt[S2] (/(- S1 S2) 55))
(= d/dt[counter]  1)
(= d/dt[e]  0)
(= d/dt[e_der]  0)
(= d/dt[e_int]  0)
(= d/dt[r]  0)
(= d/dt[tau]  1)
(= d/dt[tau_meal_1]  0)
(= d/dt[tau_meal_2]  0)
(= d/dt[u]  0)
(= d/dt[x1] (+(*(- 0.006) x1)(* 0.0034 I)))
(= d/dt[x2] (+(*(- 0.06) x2)(* 0.056 I)))
(= d/dt[x3] (+(*(- 0.03) x3)(* 0.024 I)))
))
; defining initial condition
(assert (and (>= G1_0_0 42.47938587340974) (<= G1_0_0 42.47938587341905)))
(assert (and (>= G2_0_0 70.3132401606974) (<= G2_0_0 70.3132401607199)))
(assert (and (>= I_0_0 0.04026482377446227) (<= I_0_0 0.04026482377461914)))
(assert (and (>= Q1_0_0 132.5556571622737) (<= Q1_0_0 132.5556571629436)))
(assert (and (>= Q1_prev_0_0 132.5556571622737) (<= Q1_prev_0_0 132.5556571629436)))
(assert (and (>= Q2_0_0 34.32189330672619) (<= Q2_0_0 34.32189330700089)))
(assert (and (>= S1_0_0 3.249632624594089) (<= S1_0_0 3.249632624609358)))
(assert (and (>= S2_0_0 3.603798855427398) (<= S2_0_0 3.603798855441767)))
(assert (and (>= counter_0_0 -4.940656458412465e-324) (<= counter_0_0 4.940656458412465e-324)))
(assert (and (>= e_0_0 -34.77787938516583) (<= e_0_0 -34.77787938449596)))
(assert (and (>= e_der_0_0 -0.772957387010979) (<= e_der_0_0 -0.7729573869129466)))
(assert (and (>= e_int_0_0 -33586.13105772909) (<= e_int_0_0 -33586.13105755575)))
(assert (and (>= r_0_0 97.77777777777776) (<= r_0_0 97.77777777777779)))
(assert (and (>= tau_0_0 66.00098853987396) (<= tau_0_0 66.00098853988135)))
(assert (and (>= u_0_0 0.01622297015455844) (<= u_0_0 0.01622297015489537)))
(assert (and (>= x1_0_0 0.02923196082039924) (<= x1_0_0 0.02923196082046298)))
(assert (and (>= x2_0_0 0.03981023967283265) (<= x2_0_0 0.03981023967297771)))
(assert (and (>= x3_0_0 0.0364417989756966) (<= x3_0_0 0.03644179897581914)))
; defining the integral
(assert (= [DG1_0_t DG2_0_t DG3_0_t G1_0_t G2_0_t I_0_t Kd_0_t Ki_0_t Kp_0_t Q1_0_t Q1_prev_0_t Q2_0_t S1_0_t S2_0_t counter_0_t e_0_t e_der_0_t e_int_0_t r_0_t tau_0_t tau_meal_1_0_t tau_meal_2_0_t u_0_t x1_0_t x2_0_t x3_0_t ] (integral 0.0 time [DG1_0_0 DG2_0_0 DG3_0_0 G1_0_0 G2_0_0 I_0_0 Kd_0_0 Ki_0_0 Kp_0_0 Q1_0_0 Q1_prev_0_0 Q2_0_0 S1_0_0 S2_0_0 counter_0_0 e_0_0 e_der_0_0 e_int_0_0 r_0_0 tau_0_0 tau_meal_1_0_0 tau_meal_2_0_0 u_0_0 x1_0_0 x2_0_0 x3_0_0 ] flow_3)))
; defining invariants negations
(assert (or
(not (>=(-(/ Q1_0_t(* 0.16 100)) 4) 0))
(not (>=(- 16(/ Q1_0_t(* 0.16 100))) 0))
(not (>=(+ u_0_t 0.055485957306259535484277955219043) 0))
))
(check-sat)
(exit)
