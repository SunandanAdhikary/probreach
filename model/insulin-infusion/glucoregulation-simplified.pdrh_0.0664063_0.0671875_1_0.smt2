(set-logic QF_NRA_ODE)
(declare-fun x3 () Real)
(declare-fun x2 () Real)
(declare-fun x1 () Real)
(declare-fun tau () Real)
(declare-fun S2 () Real)
(declare-fun S1 () Real)
(declare-fun Q2 () Real)
(declare-fun Q1 () Real)
(declare-fun I () Real)
(declare-fun x3_0_0 () Real)
(declare-fun x3_0_t () Real)
(declare-fun x3_1_0 () Real)
(declare-fun x3_1_t () Real)
(declare-fun x2_0_0 () Real)
(declare-fun x2_0_t () Real)
(declare-fun x2_1_0 () Real)
(declare-fun x2_1_t () Real)
(declare-fun x1_0_0 () Real)
(declare-fun x1_0_t () Real)
(declare-fun x1_1_0 () Real)
(declare-fun x1_1_t () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(declare-fun tau_1_0 () Real)
(declare-fun tau_1_t () Real)
(declare-fun S2_0_0 () Real)
(declare-fun S2_0_t () Real)
(declare-fun S2_1_0 () Real)
(declare-fun S2_1_t () Real)
(declare-fun S1_0_0 () Real)
(declare-fun S1_0_t () Real)
(declare-fun S1_1_0 () Real)
(declare-fun S1_1_t () Real)
(declare-fun Q2_0_0 () Real)
(declare-fun Q2_0_t () Real)
(declare-fun Q2_1_0 () Real)
(declare-fun Q2_1_t () Real)
(declare-fun Q1_0_0 () Real)
(declare-fun Q1_0_t () Real)
(declare-fun Q1_1_0 () Real)
(declare-fun Q1_1_t () Real)
(declare-fun I_0_0 () Real)
(declare-fun I_0_t () Real)
(declare-fun I_1_0 () Real)
(declare-fun I_1_t () Real)
(declare-fun time_0 () Real)
(declare-fun time_1 () Real)
(declare-fun mode_0 () Real)
(declare-fun mode_1 () Real)
(define-ode flow_1 ((= d/dt[Q1] (+ (+ (- (+ (- (- 0 (/ (/ (* (* 0.0097 100) (/ Q1 (* 0.16 100))) (+ (/ Q1 (* 0.16 100)) 1)) 0.85)) (* x1 Q1)) (* 0.066 Q2)) 0) (* (* 0.0161 100) (- 1 x3))) (/ (* 8 180) 1000))) (= d/dt[Q2] (- (* x1 Q1) (* (+ 0.066 x2) Q2))) (= d/dt[S1] (- 0 (/ S1 55))) (= d/dt[S2] (/ (- S1 S2) 55)) (= d/dt[I] (- (/ S2 (* 55 (* 0.12 100))) (* 0.138 I))) (= d/dt[x1] (+ (* -0.006 x1) (* 0.0034 I))) (= d/dt[x2] (+ (* -0.06 x2) (* 0.056 I))) (= d/dt[x3] (+ (* -0.03 x3) (* 0.024 I))) (= d/dt[tau] 0.5)))
(define-ode flow_2 ((= d/dt[Q1] (+ (+ (- (+ (- (- 0 (/ (/ (* (* 0.0097 100) (/ Q1 (* 0.16 100))) (+ (/ Q1 (* 0.16 100)) 1)) 0.85)) (* x1 Q1)) (* 0.066 Q2)) 0) (* (* 0.0161 100) (- 1 x3))) (/ (* 8 180) 1000))) (= d/dt[Q2] (- (* x1 Q1) (* (+ 0.066 x2) Q2))) (= d/dt[S1] (- 0.36 (/ S1 55))) (= d/dt[S2] (/ (- S1 S2) 55)) (= d/dt[I] (- (/ S2 (* 55 (* 0.12 100))) (* 0.138 I))) (= d/dt[x1] (+ (* -0.006 x1) (* 0.0034 I))) (= d/dt[x2] (+ (* -0.06 x2) (* 0.056 I))) (= d/dt[x3] (+ (* -0.03 x3) (* 0.024 I))) (= d/dt[tau] 0.5)))
(assert (<= -2.05 x3_0_0))
(assert (<= x3_0_0 2.15))
(assert (<= -2.05 x3_0_t))
(assert (<= x3_0_t 2.15))
(assert (<= -2.05 x3_1_0))
(assert (<= x3_1_0 2.15))
(assert (<= -2.05 x3_1_t))
(assert (<= x3_1_t 2.15))
(assert (<= -10 x2_0_0))
(assert (<= x2_0_0 10))
(assert (<= -10 x2_0_t))
(assert (<= x2_0_t 10))
(assert (<= -10 x2_1_0))
(assert (<= x2_1_0 10))
(assert (<= -10 x2_1_t))
(assert (<= x2_1_t 10))
(assert (<= -10 x1_0_0))
(assert (<= x1_0_0 10))
(assert (<= -10 x1_0_t))
(assert (<= x1_0_t 10))
(assert (<= -10 x1_1_0))
(assert (<= x1_1_0 10))
(assert (<= -10 x1_1_t))
(assert (<= x1_1_t 10))
(assert (<= 0 tau_0_0))
(assert (<= tau_0_0 500))
(assert (<= 0 tau_0_t))
(assert (<= tau_0_t 500))
(assert (<= 0 tau_1_0))
(assert (<= tau_1_0 500))
(assert (<= 0 tau_1_t))
(assert (<= tau_1_t 500))
(assert (<= -50 S2_0_0))
(assert (<= S2_0_0 50))
(assert (<= -50 S2_0_t))
(assert (<= S2_0_t 50))
(assert (<= -50 S2_1_0))
(assert (<= S2_1_0 50))
(assert (<= -50 S2_1_t))
(assert (<= S2_1_t 50))
(assert (<= -50 S1_0_0))
(assert (<= S1_0_0 50))
(assert (<= -50 S1_0_t))
(assert (<= S1_0_t 50))
(assert (<= -50 S1_1_0))
(assert (<= S1_1_0 50))
(assert (<= -50 S1_1_t))
(assert (<= S1_1_t 50))
(assert (<= -1000 Q2_0_0))
(assert (<= Q2_0_0 1000))
(assert (<= -1000 Q2_0_t))
(assert (<= Q2_0_t 1000))
(assert (<= -1000 Q2_1_0))
(assert (<= Q2_1_0 1000))
(assert (<= -1000 Q2_1_t))
(assert (<= Q2_1_t 1000))
(assert (<= -1000 Q1_0_0))
(assert (<= Q1_0_0 1000))
(assert (<= -1000 Q1_0_t))
(assert (<= Q1_0_t 1000))
(assert (<= -1000 Q1_1_0))
(assert (<= Q1_1_0 1000))
(assert (<= -1000 Q1_1_t))
(assert (<= Q1_1_t 1000))
(assert (<= -10 I_0_0))
(assert (<= I_0_0 10))
(assert (<= -10 I_0_t))
(assert (<= I_0_t 10))
(assert (<= -10 I_1_0))
(assert (<= I_1_0 10))
(assert (<= -10 I_1_t))
(assert (<= I_1_t 10))
(assert (<= 0 time_0 [0.000000]))
(assert (<= time_0 1000 [0.000000]))
(assert (<= 0 time_1 [0.000000]))
(assert (<= time_1 1000 [0.000000]))
(assert (<= 1 mode_0))
(assert (<= mode_0 2))
(assert (<= 1 mode_1))
(assert (<= mode_1 2))
(assert (and (and (= Q2_0_0 40) (= Q1_0_0 64) (= S2_0_0 4) (= S1_0_0 4.2) (= tau_0_0 0) (<= x3_0_0 0.0671875) (>= x3_0_0 0.0664063) (= x2_0_0 0.045) (= x1_0_0 0.03) (= I_0_0 0.03)) (= mode_0 1) (= [x3_0_t x2_0_t x1_0_t tau_0_t S2_0_t S1_0_t Q2_0_t Q1_0_t I_0_t] (integral 0. time_0 [x3_0_0 x2_0_0 x1_0_0 tau_0_0 S2_0_0 S1_0_0 Q2_0_0 Q1_0_0 I_0_0] flow_1)) (= mode_0 1) (= mode_1 2) (= (/ Q1_0_t (* 0.16 100)) 10) (= Q2_1_0 Q2_0_t) (= Q1_1_0 Q1_0_t) (= S2_1_0 S2_0_t) (= S1_1_0 S1_0_t) (= tau_1_0 0) (= x3_1_0 x3_0_t) (= x2_1_0 x2_0_t) (= x1_1_0 x1_0_t) (= I_1_0 I_0_t) (= [x3_1_t x2_1_t x1_1_t tau_1_t S2_1_t S1_1_t Q2_1_t Q1_1_t I_1_t] (integral 0. time_1 [x3_1_0 x2_1_0 x1_1_0 tau_1_0 S2_1_0 S1_1_0 Q2_1_0 Q1_1_0 I_1_0] flow_2)) (= mode_1 2) (= mode_1 2) (<= (/ Q1_1_t (* 0.16 100)) 10) (= tau_1_t 60)))
(check-sat)
(exit)
