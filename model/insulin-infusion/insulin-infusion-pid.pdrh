/**
 * Insulin action subsystem kinetics.
 * Sources: Sriram, Hovorka 2002, Hovorka 2004
 */
#define w 100 //[kg] weight of the patient
#define ka1 0.006 //[min^(-1)] deactivation rate constant (Hovorka 2004)
#define ka2 0.06 //[min^(-1)] deactivation rate constant (Hovorka 2004)
#define ka3 0.03 //[min^(-1)] deactivation rate constant (Hovorka 2004)

#define Sf1T 51.2 * 0.0001 //[min^(-1) per mU * L^(-1)] insulin sensitivity of distribution/transport (Hovorka 2004)
#define Sf1D 8.2 * 0.0001 //[min^(-1) per mU * L^(-1)] insulin sensitivity of disposal (Hovorka 2004)
#define Sf1E 520 * 0.0001 //[min^(-1) per mU * L^(-1)] insulin sensitivity of EGP (Hovorka 2004)

//#define kb1 Sf1T * ka1 // [min^(-2) / (mU / L)] activation rate constant (Hovorka 2004)
//#define kb2 Sf1D * ka2 // [min^(-2) / (mU / L)] activation rate constant (Hovorka 2004)
//#define kb3 Sf1E * ka3 // [min^(-2) / (mU / L)] activation rate constant (Hovorka 2004)

#define kb1 0.0034 //[min^(-2) / (mU / L)] activation rate constant (Sriram)
#define kb2 0.056 //[min^(-2) / (mU / L)] activation rate constant (Sriram)
#define kb3 0.024 //[min^(-2) / (mU / L)] activation rate constant (Sriram)

#define tmaxI 55 //[min] time-to-maximum insulin absorption (Hovorka 2004)
#define VI (0.12 * w)//[L * kg^(-1)] insulin distribution volume (Hovorka 2004)
#define ke 0.138//[min^(-1)] insulin elimination from plasma (Hovorka 2004)

#define k12 0.066 //[min^(-1)] transfer rate constant from the non-accessible to the accessible compartment (Hovorka 2004)
#define VG (0.16 * w) //[L * kg^(-1)] distribution volume of the accessible compartment (Hovorka 2004)
#define G (Q1 / VG) //[mmol/L] glucose concentration (Hovorka 2004)
#define F01 (0.0097 * w) //[mmol * kg^(-1) * min^(-1)] non-insulin-dependent glucose flux (Hovorka 2004)
#define Fc01 (F01 * G/(G + 1) / 0.85) //total non-insulin-dependent glucose flux corrected for the ambient glucose concentration (Hovorka 2004)
//#define FR (0.003 * (G - 9) * VG) //renal glucose clearance above the glucose threshold of 9 mmol/L^(-1) (Hovorka 2004)
#define FR 0
#define EGP0 (0.0161 * w) //[mmol * kg^(-1) * min^(-1)] endogenous glucose production 

// Glucose Absorption

//#define UG 8 * 180 / 1000 // glucose absorption rate (Sriram)
//#define UG DG*0.01743 // glucose absorption rate (Fedor 2017)

#define UG (DG/Gmolar)*1000*AG*tau*exp(-tau/tmaxG)/(tmaxG^2) // glucose absorption rate (Hovorka 2004)
#define Gmolar 180.1559 //[g/mol] molar mass of glucose (Google 2017)
//#define DG 40 //[g] amount of carbohydrates digested (Hovorka 2004)
//dist_uniform(40,100) DG; //[g] amount of carbohydrates digested (Fedor 2017)
dist_normal(70,1) DG; //[g] amount of carbohydrates digested (Fedor 2017)

#define AG 0.8 //carbohydrate bioavailability (Hovorka 2004)
#define tmaxG 40 //[min] time-of-maximum appearance rate of glucose in the accessible glucose compartment (Hovorka 2004)

#define t_pid 180

[8,10] G_upper; //[mmol/L] glucose concentration upper shut off bound (Fedor 2017)
[6,8] G_lower; //[mmol/L] glucose concentration lower shut off bound (Fedor 2017)

#define G_goal 4.5

#define G_upper_unsafe 16
#define G_lower_unsafe 4

//#define G_SP 8.0 //[mmol/L] glucose concentration set point (Fedor 2017)
[0,4] G_SP; //[mmol/L] glucose concentration set point (Fedor 2017)

//#define Kp -0.02 // proportional component of PID (Fedor 2017)
//#define Kd -1 // derivative component of PID (Fedor 2017)
[-0.01, -0.001] Kp; // proportional component of PID (Fedor 2017)
[-0.2, 0] Kd; // derivative component of PID (Fedor 2017)

// dynamics
#define r_ode 0
#define Q1_ode (-Fc01 - x1 * Q1 + k12 * Q2 - FR + EGP0 * (1 - x3) + UG)
#define Q2_ode x1 * Q1 - (k12 + x2) * Q2
#define e_der (r_ode - Q1_ode)

// administration (bolus and infusion) of insulin (Hovorka 2004)
//#define u 0.8 //(Fedor 2017)

#define tmaxU 5 // (Fedor 2017)
#define Kins 60 // (Fedor 2017)
#define u_basal 0.0 // basal insulin infusion rate (Fedor 2017)
//[0,0.2] u_basal; // basal insulin infusion rate (Fedor 2017)

//#define u (DG/100)*(Kins*tau_ins*exp(-tau_ins/tmaxU)/(tmaxU^2)) + u_basal // (Fedor 2017)

#define u Kp * e + Kd * e_der
//dist_uniform(300,480) t_meal; // [min] time to the next meal (Fedor 2017)
dist_normal(300,5) t_meal; // [min] time to the next meal (Fedor 2017)
//#define t_meal 300

dist_normal(64,1) Q1_init;
dist_normal(40,1) Q2_init;
dist_normal(0.03,1e-3) I_init;
dist_normal(4.2,0.1) S1_init;
dist_normal(4,0.1) S2_init;
dist_normal(0.03,1e-3) x1_init;
dist_normal(0.045,1e-3) x2_init;
dist_normal(0.04,1e-3) x3_init;

//#define Q1_init 128
//#define Q2_init 80
//#define I_init 0.03
//#define S1_init 4.2
//#define S2_init 4
//#define x1_init 0.03
//#define x2_init 0.045
//#define x3_init 0.04

[-1e6,1e6] x1; //[min^(-1)] (remote) effect of insulin on glucose distribution (Hovorka 2004)
[-1e6,1e6] x2; //[min^(-1)] (remote) effect of insulin on glucose disposal (Hovorka 2004)
[-1e6,1e6] x3; //[min^(-1)] (remote) effect of insulin on endogenous glucose production (Hovorka 2004)
[-1e6,1e6] I; //[mU/L] plasma inslulin concentration (Hovorka 2002)
[-1e6,1e6] S1; //absorption of subcutaneously administered short-acting (e.g. Lispro) insulin (Hovorka 2004)
[-1e6,1e6] S2; //absorption of subcutaneously administered short-acting (e.g. Lispro) insulin (Hovorka 2004)
[-1e6,1e6] Q1; //[mmol] mass of glucose in the accessible compartment (where the measurements are made) (Hovorka 2004)
[-1e6,1e6] Q2; //[mmol] mass of glucose in the non-accessible compartment (Hovorka 2004)
[-1e6,1e6] r; // reference trajectory
[-1e6,1e6] e; // error

#define range 0.2

[0,500] tau;
[0,500] time;

// the insulin pump is OFF eating
{
mode 1;

time:

[0,t_meal-t_pid];

flow:

//error
d/dt[e] = 0;

//reference trajectory
d/dt[r] = r_ode;

//glucose-subsystem
d/dt[Q1]= Q1_ode;
d/dt[Q2]= Q2_ode;

//insulin-subsystem
d/dt[S1]= u_basal - S1 / tmaxI;
d/dt[S2]= (S1 - S2) / tmaxI;
d/dt[I]= S2 / (tmaxI * VI) - ke * I;

//insulin-action-subsystem
d/dt[x1]= - ka1 * x1 + kb1 * I;
d/dt[x2]= - ka2 * x2 + kb2 * I;
d/dt[x3]= - ka3 * x3 + kb3 * I;
d/dt[tau]= 1;

jump:
(and (G <= G_upper) (G >= G_upper)) ==> @2(and (e' = r - Q1));
}

// the insulin pump is ON
{
mode 2;

time:

[0,t_pid];

flow:

//error
d/dt[e] = r_ode - Q1_ode;

//reference trajectory
d/dt[r] = r_ode;

//glucose-subsystem
d/dt[Q1]= Q1_ode;
d/dt[Q2]= Q2_ode;

//insulin-subsystem
d/dt[S1]= u - S1 / tmaxI;
d/dt[S2]= (S1 - S2) / tmaxI;
d/dt[I]= S2 / (tmaxI * VI) - ke * I;

//insulin-action-subsystem
d/dt[x1]= - ka1 * x1 + kb1 * I;
d/dt[x2]= - ka2 * x2 + kb2 * I;
d/dt[x3]= - ka3 * x3 + kb3 * I;
d/dt[tau]= 1;

jump:
(and (G <= G_lower) (G >= G_lower)) ==> @3(and (tau' = tau));
//(or (and (G <= G_lower) (G >= G_lower)) (and (u <= 0) (u >= 0))) ==> @3(and (tau' = tau));
//(or (and (tau_ins >= t_pid) (tau_ins <= t_pid) (G > G_switch)) (G > G_upper_unsafe) (u < 0)) ==> @4(and (tau' = 0));
//(G > G_upper_unsafe) ==> @4(and (tau' = 0));
(and (G >= G_upper_unsafe) (G <= G_upper_unsafe)) ==> @4 (and (tau' = 0));
}

// the insulin pump is OFF fasting
{
mode 3;

time:

[0,t_meal-tau];

flow:

//error
d/dt[e] = 0;

//reference trajectory
d/dt[r] = r_ode;

//glucose-subsystem
d/dt[Q1]= Q1_ode;
d/dt[Q2]= Q2_ode;

//insulin-subsystem
d/dt[S1]= u_basal - S1 / tmaxI;
d/dt[S2]= (S1 - S2) / tmaxI;
d/dt[I]= S2 / (tmaxI * VI) - ke * I;

//insulin-action-subsystem
d/dt[x1]= - ka1 * x1 + kb1 * I;
d/dt[x2]= - ka2 * x2 + kb2 * I;
d/dt[x3]= - ka3 * x3 + kb3 * I;
d/dt[tau]= 1;

jump:

(tau = t_meal) ==>@1(and (tau' = 0));
//(or (G > G_upper_unsafe) (G < G_lower_unsafe) )==>@4(and (tau' = 0));
(and (G <= G_lower_unsafe) (G >= G_lower_unsafe)) ==>@4(and (tau' = 0));
}

// error state - the glucose level is critical
{
mode 4;

time:

[0,1];

flow:

//error
d/dt[e] = 0;

//reference trajectory
d/dt[r] = 0;

//glucose-subsystem
d/dt[Q1]= 0;
d/dt[Q2]= 0;

//insulin-subsystem
d/dt[S1]= 0;
d/dt[S2]= 0;
d/dt[I]= 0;

//insulin-action-subsystem
d/dt[x1]= 0;
d/dt[x2]= 0;
d/dt[x3]= 0;
d/dt[tau]= 1;

jump:

}

init:
@1(and	(I = I_init) (x1 = x1_init) (x2 = x2_init) (x3 = x3_init) (tau = 0.0) (S1 = S1_init) (S2 = S2_init) (Q1 = Q1_init) (Q2 = Q2_init) (r = G_SP * VG) (e = r - Q1));

goal:
//@3(and (tau = t_meal)
//(Q1 >= (1-range) * Q1_init) (Q1 <= (1+range) * Q1_init)
//(Q2 >= (1-range) * Q2_init) (Q2 <= (1+range) * Q2_init)
//(I >= (1-range) * I_init) (I <= (1+range) * I_init)
//);
@4(tau = 1);













