#define	alphax	0.0197
#define alphay	0.0242
#define	betax	0.0175
#define	betay	0.0168
#define	k1	10.0
#define	k2	1.0
#define	k3	10.0
#define	k4	2
#define	m1	0.00005
#define	z0	12.0
#define gamma   0.08
#define	d0	1.0
#define c1	0.01
#define c2	0.03
#define c3	0.02
#define	Gx	((alphax/(1+exp((k1-z)*k2)))-(betax/(1+exp((z-k3)*k4))))
#define Gy	((alphay * (1 - (d0 * (z / z0)))) - betay)
#define Mxy	(m1 * (1 - (z / z0)))
#define scale	1.0
#define T	1000.0

// therapy plan
//#define	r0	4.0
//#define	r1	10.0

[0,T]time;
[0,T]tau;

[0,100.0]x;
[0,10.0]y;
[0.0,100.0]z;
[0.0,20.0]r0;
[0.0,20.0]r1;

{
mode 1;
invt:
(y <= 1);
flow:
d/dt[x]=scale * ((Gx - Mxy - c1) * x + c2);
d/dt[y]=scale * (Mxy * x + Gy * y);
d/dt[z]=scale * (-z * gamma + c3);
d/dt[tau]=scale * 1.0;
d/dt[r0]=0;
d/dt[r1]=0;
jump:
((x+y)=r0)==>@2(and(tau'=tau)(x'=x)(y'=y)(z'=z)(r0'=r0)(r1'=r1));
}

{
mode 2;
invt:
(y <= 1);
flow:
d/dt[x]=scale * ((Gx - Mxy - c1) * x + c2);
d/dt[y]=scale * (Mxy * x + Gy * y);
d/dt[z]=scale * ((z0 - z) * gamma + c3);
d/dt[tau]=scale * 1.0;
d/dt[r0]=0;
d/dt[r1]=0;
jump:
((x+y)=r1)==>@1(and(tau'=tau)(x'=x)(y'=y)(z'=z)(r0'=r0)(r1'=r1));
}

init:
@1(and(x=19)(y=0.1)(z=12.5)(tau=0)(r0>=0)(r0<=4)(r1>=10)(r1<=14));

goal:
//@1(and(x+y=r0));
@2(and(x+y=r1));