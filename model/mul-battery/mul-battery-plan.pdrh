model: npha;
/*
 * This model describes dynamics for 2 batteries battery.
 *
 * Condition for the battery to be dead is gamma1<=(1-c1)*delta1
 *
 * 
 */

//#define kprime 0.122
// initial charge of the battery can be randomized ([5.0,6.0] works)
//#define gamma_l 5.0
//#define gamma_u 5.0
//#define c 0.166
#define t_g 4.0

[-100,100] delta1;
[-100,100] gamma1;
[-100,100] delta2;
[-100,100] gamma2;
[0,10] i;
[0,4] tau;
[0,4] time;

[1.0,2.0] t_j1; // works
[1.0,2.0] t_j2; // works
//[0.5,1.5] t_j3; // works, about 20 seconds
//[0.5,1.5] t_j4; // works, about 1-2 minutes
//[0.5,1.5] t_g;

dist_normal(0.122, 0.01) kprime;
dist_normal(0.166, 0.01) c;
dist_uniform(4.0, 6.0) gamma01;
dist_normal(5.0, 0.1) gamma02;

// battery 1 used
// battery 2 full
{
mode 1;
flow:
d/dt[delta1]=i/c;
d/dt[gamma1]=-i;
d/dt[delta2]=0;
d/dt[gamma2]=0;
//d/dt[i]=-0.1*exp(-t/4);
d/dt[i]=i;
d/dt[tau]=1;
jump:
(tau>=t_j1)==>@2(and
                            (tau'=tau)
                            (i'=i)
                            (delta1'=delta1)
                            (gamma1'=gamma1)
                            (delta2'=delta2)
                            (gamma2'=gamma2)
                            (t_j1'=t_j1)
                            (t_j2'=t_j2)
                            //(t_j3'=t_j3)
                            //(t_j4'=t_j4)
                            );
}

// battery 1 recovering
// battery 2 used
{
mode 2;
flow:
d/dt[delta1]= - delta1 * kprime;
d/dt[gamma1]=0;
d/dt[delta2]=i/c;
d/dt[gamma2]=-i;
//d/dt[i]=-0.1*exp(-t/4);
d/dt[i]=i;
d/dt[tau]=1;
jump:
(tau>=t_j2)==>@3(and
                            (tau'=tau)
                            (i'=i)
                            (delta1'=delta1)
                            (gamma1'=gamma1)
                            (delta2'=delta2)
                            (gamma2'=gamma2)
                            (t_j1'=t_j1)
                            (t_j2'=t_j2)
                            //(t_j3'=t_j3)
                            //(t_j4'=t_j4)
                            );
}

{
mode 3;
flow:
d/dt[delta1]=i/c;
d/dt[gamma1]=-i;
d/dt[delta2]= - delta2 * kprime;
d/dt[gamma2]=0;
//d/dt[i]=-0.1*exp(-t/4);
d/dt[i]=i;
d/dt[tau]=1;
jump:

}


/*
// battery 1 used
// battery 2 recovering
{
mode 3;
flow:
d/dt[delta1]=i/c;
d/dt[gamma1]=-i;
d/dt[delta2]= - delta2 * kprime;
d/dt[gamma2]=0;
//d/dt[i]=-0.1*exp(-t/4);
d/dt[i]=i;
d/dt[tau]=1;
jump:
(and(tau=t_j3))==>@4(and
                            (tau'=0)
                            (i'=0.15)
                            (delta1'=delta1)
                            (gamma1'=gamma1)
                            (delta2'=delta2)
                            (gamma2'=gamma2)
                            (t_j1'=t_j1)
                            (t_j2'=t_j2)
                            (t_j3'=t_j3)
                            (t_j4'=t_j4));
}

// battery 1 recovering
// battery 2 used
{
mode 4;
flow:
d/dt[delta1]= - delta1 * kprime;
d/dt[gamma1]=0;
d/dt[delta2]=i/c;
d/dt[gamma2]=-i;
//d/dt[i]=-0.1*exp(-t/4);
d/dt[i]=i;
d/dt[tau]=1;
jump:
(and(tau=t_j4))==>@5(and
                            (tau'=0)
                            (i'=0.15)
                            (delta1'=delta1)
                            (gamma1'=gamma1)
                            (delta2'=delta2)
                            (gamma2'=gamma2)
                            (t_j1'=t_j1)
                            (t_j2'=t_j2)
                            (t_j3'=t_j3)
                            (t_j4'=t_j4));
}

// battery 1 used
// battery 2 recovering
{
mode 5;
flow:
d/dt[delta1]=i/c;
d/dt[gamma1]=-i;
d/dt[delta2]= - delta2 * kprime;
d/dt[gamma2]=0;
//d/dt[i]=-0.1*exp(-t/4);
d/dt[i]=i;
d/dt[tau]=1;
jump:

}
*/

init:
@1(and (tau=0)(i=0.15)(delta1=0)(gamma1=gamma01)(delta2=0)(gamma2=gamma02));

goal:
//@5(and (tau=t_j1+t_j2+t_j3+t_j4+t_g)(and(gamma1>(1-c)*delta1)(gamma2>(1-c)*delta2)));
//@5(and (tau=t_g)(and(gamma1>(1-c)*delta1)(gamma2>(1-c)*delta2)));
//@3(and (tau=t_g)(and(gamma1>(1-c)*delta1)(gamma2>(1-c)*delta2)));
//@1(and (tau=t_g)(and(gamma1>(1-c)*delta1)(gamma2>(1-c)*delta2)));
@2(and(tau=t_g)(and(gamma1>(1-c)*delta1)(gamma2>(1-c)*delta2)));