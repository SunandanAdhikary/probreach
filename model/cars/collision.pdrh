MODEL_TYPE(NPHA)
#define v01_init 11.12 //car1 initial speed (m/s)
#define v02_init 11.12 //car2 initial speed (m/s)
#define v_max 16.67 //speed limit (m/s)
#define t_safe 2 //"2 seconds rule" (s)
#define s01 0 //car1 initial position (m)
#define s02 s01 + v01 * t_safe //car2 initial position (m)
#define aa1 3 //car1 acceleration (m/s^2)
#define aa2 0 //car2 acceleration (m/s^2)
#define ad1 -4.0 //car1 deceleration (m/s^2)
//#define ad2 -1.35 //car2 deceleration (m/s^2)
#define s_stop 200 //distance to the STOP sign (m)
//#define t_react 1 //time to react for car2 to hit the brakes (s)

N(-1.35,0.1)ad2;
[0,500]s1;
[0,500]s2;
[0,50]v1;
[0,50]v2;
[0,50]v01;
[0,50]v02;
[0,60]t;
[0,60]time;
//[0.8,1.2]t_react;
[0.95,1.05]t_react;

// car1 started accelerating
// car2 is moving with a constant speed
{
mode1;

flow:
d/dt[s1]=v01 + aa1 * t;
d/dt[s2]=v02;
d/dt[v1]=aa1;
d/dt[v2]=0.0;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[t]=1.0;
jump:
(and (v1 = v_max))==>@2(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (t' = 0));
}

// car1 is moving with a constant speed
// car2 is moving with a constant speed
{
mode2;

flow:
d/dt[s1]=v01;
d/dt[s2]=v02;
d/dt[v1]=0.0;
d/dt[v2]=0.0;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[t]=1.0;
jump:
(and (s1 = s2 + v2 * t_safe))==>@3(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (t' = 0));
}

// car1 started decelerating
// car2 is moving with a constant speed
{
mode3;
invt:
(s1 > s2);
flow:
d/dt[s1]=v01 + ad1 * t;
d/dt[s2]=v02;
d/dt[v1]=ad1;
d/dt[v2]=0.0;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[t]=1.0;
jump:
(and (t = t_react))==>@4(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (t' = 0));
}

// car1 is decelerating
// car2 started decelerating
{
mode4;
invt:
(s1 > s2);
flow:
d/dt[s1]=v01 + ad1 * t;
d/dt[s2]=v02 + ad2 * t;
d/dt[v1]=ad1;
d/dt[v2]=ad2;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[t]=1.0;
jump:
(and (v1 = 0) (v2 > 0))==>@5(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (t' = 0));
(and (v1 > 0) (v2 = 0))==>@6(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (t' = 0));
}

// car1 stopped
// car2 is decelerating
{
mode5;
invt:
(s1 > s2);
//invt_c:
//(s1 <= s2);
flow:
d/dt[s1]=0;
d/dt[s2]=v02 + ad2 * t;
d/dt[v1]=0;
d/dt[v2]=ad2;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[t]=1.0;
jump:
(and (v2 = 0))==>@6(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (t' = 0));
}

// car1 is decelerating
// car2 stopped
{
mode6;
invt:
(s1 > s2);
flow:
d/dt[s1]=v01 + ad1 * t;
d/dt[s2]=0;
d/dt[v1]=ad1;
d/dt[v2]=0;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[t]=1.0;
jump:
(and (v1 = 0))==>@7(and (s1' = s1) (s2' = s2) (v1' = v1) (v2' = v2) (v01' = v1) (v02' = v2) (t' = 0));
}

// car1 stopped
// car2 stopped
{
mode7;
invt:
(s1 > s2);
flow:
d/dt[s1]=0;
d/dt[s2]=0;
d/dt[v1]=0;
d/dt[v2]=0;
d/dt[v01]=0.0;
d/dt[v02]=0.0;
d/dt[t]=1.0;
jump:

}

init:
@1(and (s1 = s01) (s2 = s02) (v1 = v01_init) (v2 = v02_init) (v01 = v01_init) (v02 = v02_init) (t = 0));

goal:
//checking for reaching maximum speed
//@1(and (t <= 10) (v1 = v_max));
//checking for passing car2 by car1
//@2(and (s1 >= s2 + v2 * t_safe));
//checking for collision when car1 started decelerating and car2 has not reacted yet
//@3(t = t_react);
//checking for collision when car1 is decelerating and car2 started decelerating
//@4(or (v1 <= 0) (v2 <= 0));
//checking for collision when car1 stopped and car2 is decelerating
@5(and (v2 = 0) (s1 > s2));

//@7(and (v1 = 0.0) (v2 = 0.0) (s1 <= s_stop));
goal_c:
@5(and (s1 <= s2));
