model: npha;
/*
 * the model is accurate for 0-100 km/h period
 */
#define v_max 55.56 // [200 km/h] maximum speed of a car (m/s)
#define v_100 27.78 // m/s
#define drag 3.028e-4 // some average value (1/m)
#define a_dec 5.25
//#define tau 0.8
#define mu 1
#define alpha 0.05776 
//#define beta 4.01746

[0,1000] s; // distance m
[0,60] v; // velocity m/s (16.67 m/s = 60 km/h)
[0,40] tau; // time in seconds
[0,40] time;
[0.8,1.5] t_react; // reaction time (s) (nondet)
//[0.5,1.5] mu; // decceleration multiplier modelling road conditions (random)
//N(1.0,0.1)mu;
//N(0.05,0.01)alpha;
dist_norm(4,0.1) beta;

// accelerating
{
mode 1;
flow:
d/dt[s]= v;
d/dt[v]= alpha*exp(-alpha*t+beta) - drag*v*v;
d/dt[tau]= 1.0;
jump:
(and (v >= v_100))==>@2(and (s' = s) (v' = v) (t' = 0));
}

// reacting
{
mode 2;
flow:
d/dt[s]= v;
d/dt[v]= - drag*v*v;
d/dt[tau]= 1.0;
jump:
(and (tau >= t_react))==>@3(and (s' = s) (v' = v) (t' = 0));
}

// braking
{
mode 3;
flow:
d/dt[s]= v;
d/dt[v]= - a_dec * mu - drag*v*v;
d/dt[t]= 1.0;
jump:
(and (v <= 0))==>@4(and(s'=s)(v'=v)(t'=0))
}

init:
@1(and (s = 0) (v = 0) (t = 0));

goal:
@4(and(s>=300));
