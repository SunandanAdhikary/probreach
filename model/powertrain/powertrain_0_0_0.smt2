(set-logic QF_NRA_ODE)
; declaring functions and their bounds
(declare-fun Kd () Real)
(declare-fun Kd_0_0 () Real)
(declare-fun Kd_0_t () Real)
(assert (>= Kd_0_0  0))
(assert (>= Kd_0_t  0))
(assert (<= Kd_0_0  0.5))
(assert (<= Kd_0_t  0.5))
(declare-fun Ki () Real)
(declare-fun Ki_0_0 () Real)
(declare-fun Ki_0_t () Real)
(assert (>= Ki_0_0  0))
(assert (>= Ki_0_t  0))
(assert (<= Ki_0_0  0.5))
(assert (<= Ki_0_t  0.5))
(declare-fun Kp () Real)
(declare-fun Kp_0_0 () Real)
(declare-fun Kp_0_t () Real)
(assert (>= Kp_0_0  0))
(assert (>= Kp_0_t  0))
(assert (<= Kp_0_0  0.5))
(assert (<= Kp_0_t  0.5))
(declare-fun counter () Real)
(declare-fun counter_0_0 () Real)
(declare-fun counter_0_t () Real)
(assert (>= counter_0_0  0))
(assert (>= counter_0_t  0))
(assert (<= counter_0_0  0.1))
(assert (<= counter_0_t  0.1))
(declare-fun e () Real)
(declare-fun e_0_0 () Real)
(declare-fun e_0_t () Real)
(assert (>= e_0_0 (- 1000)))
(assert (>= e_0_t (- 1000)))
(assert (<= e_0_0  1000))
(assert (<= e_0_t  1000))
(declare-fun e_der () Real)
(declare-fun e_der_0_0 () Real)
(declare-fun e_der_0_t () Real)
(assert (>= e_der_0_0 (- 1e6)))
(assert (>= e_der_0_t (- 1e6)))
(assert (<= e_der_0_0  1e6))
(assert (<= e_der_0_t  1e6))
(declare-fun e_int () Real)
(declare-fun e_int_0_0 () Real)
(declare-fun e_int_0_t () Real)
(assert (>= e_int_0_0 (- 1e6)))
(assert (>= e_int_0_t (- 1e6)))
(assert (<= e_int_0_0  1e6))
(assert (<= e_int_0_t  1e6))
(declare-fun lambda () Real)
(declare-fun lambda_0_0 () Real)
(declare-fun lambda_0_t () Real)
(assert (>= lambda_0_0 (- 1000)))
(assert (>= lambda_0_t (- 1000)))
(assert (<= lambda_0_0  1000))
(assert (<= lambda_0_t  1000))
(declare-fun lambda_prev () Real)
(declare-fun lambda_prev_0_0 () Real)
(declare-fun lambda_prev_0_t () Real)
(assert (>= lambda_prev_0_0 (- 1000)))
(assert (>= lambda_prev_0_t (- 1000)))
(assert (<= lambda_prev_0_0  1000))
(assert (<= lambda_prev_0_t  1000))
(declare-fun p () Real)
(declare-fun p_0_0 () Real)
(declare-fun p_0_t () Real)
(assert (>= p_0_0 (- 1000)))
(assert (>= p_0_t (- 1000)))
(assert (<= p_0_0  1000))
(assert (<= p_0_t  1000))
(declare-fun pe () Real)
(declare-fun pe_0_0 () Real)
(declare-fun pe_0_t () Real)
(assert (>= pe_0_0 (- 1000)))
(assert (>= pe_0_t (- 1000)))
(assert (<= pe_0_0  1000))
(assert (<= pe_0_t  1000))
(declare-fun tau () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(assert (>= tau_0_0  0))
(assert (>= tau_0_t  0))
(assert (<= tau_0_0  3600))
(assert (<= tau_0_t  3600))
(declare-fun the () Real)
(declare-fun the_0_0 () Real)
(declare-fun the_0_t () Real)
(assert (>= the_0_0  0))
(assert (>= the_0_t  0))
(assert (<= the_0_0  180))
(assert (<= the_0_t  180))
(declare-fun the_in () Real)
(declare-fun the_in_0_0 () Real)
(declare-fun the_in_0_t () Real)
(declare-fun u () Real)
(declare-fun u_0_0 () Real)
(declare-fun u_0_t () Real)
(assert (>= u_0_0 (- 1e6)))
(assert (>= u_0_t (- 1e6)))
(assert (<= u_0_0  1e6))
(assert (<= u_0_t  1e6))
(declare-fun w () Real)
(declare-fun w_0_0 () Real)
(declare-fun w_0_t () Real)
; assigning the values of the sample
(assert (>= the_in_0_0 36.41693543173777))
(assert (>= the_in_0_t 36.41693543173777))
(assert (<= the_in_0_0 36.41693543173778))
(assert (<= the_in_0_t 36.41693543173778))
(assert (>= w_0_0 104.4252335931449))
(assert (>= w_0_t 104.4252335931449))
(assert (<= w_0_0 104.4252335931449))
(assert (<= w_0_t 104.4252335931449))
(assert (>= Kd_0_0 0))
(assert (>= Kd_0_t 0))
(assert (<= Kd_0_0 0))
(assert (<= Kd_0_t 0))
(assert (>= Ki_0_0 0))
(assert (>= Ki_0_t 0))
(assert (<= Ki_0_0 0))
(assert (<= Ki_0_t 0))
(assert (>= Kp_0_0 0.1873141244829035))
(assert (>= Kp_0_t 0.1873141244829035))
(assert (<= Kp_0_0 0.1873141244829035))
(assert (<= Kp_0_t 0.1873141244829035))
; declaring time variable and integration bounds
(declare-fun time () Real)
(assert (>= time  0))
(assert (<= time  0.1))
; declaring a variable mocking the time variable
(declare-fun time_mock () Real)
(declare-fun time_mock_0_0 () Real)
(declare-fun time_mock_0_t () Real)
; defining odes
(define-ode flow_2 ((= d/dt[Kd]  0)
(= d/dt[Ki]  0)
(= d/dt[Kp]  0)
(= d/dt[counter]  1)
(= d/dt[e]  0)
(= d/dt[e_der]  0)
(= d/dt[e_int]  0)
(= d/dt[lambda] (* 4(-(/(* 0.9(+(+(+(- 0.366)(*(* 0.08979 w) p))(*(*(- 0.0337) w)(^ p 2)))(*(* 0.0001(^ w 2)) p)))(*(*(* 1(/ 1 14.7))(+ 1 u))(+(+(+(- 0.366)(*(* 0.08979 w) pe))(*(*(- 0.0337) w)(^ pe 2)))(*(* 0.0001(^ w 2)) pe)))) lambda)))
(= d/dt[lambda_prev]  0)
(= d/dt[p] (* 0.41328(-(*(* 2(+(+(+ 2.821(*(- 0.05231) the))(* 0.10299(^ the 2)))(*(- 0.00063)(^ the 3))))(^(-(/ p 1)(^(/ p 1) 2)) 0.5))(* 0.9(+(+(+(- 0.366)(*(* 0.08979 w) p))(*(*(- 0.0337) w)(^ p 2)))(*(* 0.0001(^ w 2)) p))))))
(= d/dt[pe] (* 0.41328(-(*(*(* 1 2)(+(+(+ 2.821(*(- 0.05231) the))(* 0.10299(^ the 2)))(*(- 0.00063)(^ the 3))))(^(-(/ p 1)(^(/ p 1) 2)) 0.5))(+(+(+(- 0.366)(*(* 0.08979 w) pe))(*(*(- 0.0337) w)(^ pe 2)))(*(* 0.0001(^ w 2)) pe)))))
(= d/dt[tau]  1)
(= d/dt[the] (* 10(- the_in the)))
(= d/dt[the_in]  0)
(= d/dt[u]  0)
(= d/dt[w]  0)
(= d/dt[time_mock] 1.0)
))
; defining initial condition
(assert (and (>= counter_0_0 -4.940656458412465e-324) (<= counter_0_0 4.940656458412465e-324)))
(assert (and (>= e_0_0 -0.02028421727911223) (<= e_0_0 -0.0194934487082552)))
(assert (and (>= e_der_0_0 0.02643799151316627) (<= e_der_0_0 0.04432501618303775)))
(assert (and (>= e_int_0_0 -0.2331498415743199) (<= e_int_0_0 -0.2323250012874996)))
(assert (and (>= lambda_0_0 14.67971578272089) (<= lambda_0_0 14.68050655129174)))
(assert (and (>= lambda_prev_0_0 14.67971578272089) (<= lambda_prev_0_0 14.68050655129174)))
(assert (and (>= p_0_0 0.9992349081424833) (<= p_0_0 0.9992349081424889)))
(assert (and (>= pe_0_0 0.8413754827712823) (<= pe_0_0 0.8413755707556997)))
(assert (and (>= tau_0_0 1.799992609746072) (<= tau_0_0 1.800000000000002)))
(assert (and (>= the_0_0 36.41693501110078) (<= the_0_0 36.41693501113379)))
(assert (and (>= u_0_0 -0.003799520400457891) (<= u_0_0 -0.00365139827793921)))
; defining the integral
(assert (= [Kd_0_t Ki_0_t Kp_0_t counter_0_t e_0_t e_der_0_t e_int_0_t lambda_0_t lambda_prev_0_t p_0_t pe_0_t tau_0_t the_0_t the_in_0_t u_0_t w_0_t time_mock_0_t] (integral 0.0 time [Kd_0_0 Ki_0_0 Kp_0_0 counter_0_0 e_0_0 e_der_0_0 e_int_0_0 lambda_0_0 lambda_prev_0_0 p_0_0 pe_0_0 tau_0_0 the_0_0 the_in_0_0 u_0_0 w_0_0 time_mock_0_0] flow_2)))
; defining jumps
(assert (or 
(= counter_0_t 0.1)
))
; defining goal for the time mock variable
(assert (= time_mock_0_0 0.0))
(assert (>= time_mock_0_t 0.0))
(check-sat)
(exit)
